grammar dk.sdu.mmmi.mdsd.iot_dsl.IoTDSL with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate ioTDSL "http://www.sdu.dk/mmmi/mdsd/iot_dsl/IoTDSL"

Program:
	elements+=ProgramElement*
;

ProgramElement:
	Mqtt | Server | Logic | NamedProgramElement
;

NamedProgramElement:
	External | VariableDeclaration | ComponentType | Board | Expose
;

Mqtt:
	'mqtt' '(' 'host' '=' host=(STRING | IP) ',' 'user' '=' user=STRING ',' 'pass' '=' pass=STRING ',' 'port' '=' port=INT ')'
;

External:
	"external" type=Type name=ID '(' parameters+=Parameter? (',' parameters+=Parameter)* ')'
;

Type:
	"string" | "integer" | "float" | "boolean"
;

Parameter:
	type=Type list?=List? name=ID
;

List:
	'[' ']'
;

VariableDeclaration:
	'var' type=Type? name=ID ('=' exp=Expression)?
;

ComponentType:
	({SensorType} 'sensortype' | {ActuatorType} 'actuatortype') name=ID ":" BEGIN initializer=ComponentInitializer? properties+=Property* END
;

ComponentInitializer:
	{ComponentInitializer} "initializer" '(' parameters+=Parameter? (',' parameters+=Parameter)* ')'
;

Property:
	"property" type=Type name=ID
;

Server:
	'server' ':' BEGIN 'port' '=' port=INT END
;

IP:
	INT '.' INT '.' INT '.' INT
;

Board:
	'board' name=ID ':'
	BEGIN
		elements+=Element+
	END
;

Element:
	WiFi | Component
;

WiFi:
	'wifi' '(' 'ssid' '=' ssid=STRING ',' 'pass' '=' pass=STRING ')'
;

Component:
	name=ID type=[ComponentType] '(' args+=Argument? (',' args+=Argument)* ')' rate=Rate?
;

Argument:
	STRING | INT | FLOAT
;

Rate:
	'every' time=INT timeUnit=TimeUnit
;

TimeUnit:
	'hours' | 'minutes' | 'seconds'
;

Logic:
	Loop
;

Loop:
	'every' time=INT timeunit=TimeUnit 'do' ':' BEGIN statements+=Statement+ END
;

Statement:
	((VariableDeclaration | Assignment) ";"?) | If
;

Assignment:
	ref=Reference '=' exp=Expression
;

Reference:
	ref=[VariableDeclaration] | PropertyUse
;

PropertyUse:
	((board=[Board] '.' component=[Component])| ('*' '.' componenttype=[ComponentType])) '.' property=[Property]
;

If:
	'if' condition=Expression 'then' BEGIN statements+=Statement+  END elseifs+=ElseIf* else=Else?
;

ElseIf:
	'elseif' condition=Expression 'then' BEGIN statements+=Statement+ END
;

Else:
	'else' BEGIN statements+=Statement+ END
;

Expression:
	Or
;

Or returns Expression:
	And ({Or.left=current} '||' right=And)*
;

And returns Expression:
	Equality ({And.left=current} "&&" right=Equality)*
;

Equality returns Expression:
	Comparison ({Equality.left=current} op=("=="|"!=") right=Comparison)*
;
Comparison returns Expression:
	PlusOrMinus ({Comparison.left=current} op=(">="|"<="|">"|"<") right=PlusOrMinus)*
;
PlusOrMinus returns Expression:
	Factor (({Plus.left=current} '+' | {Minus.left=current} '-') right=Factor)*
;

Factor returns Expression:
	Primary (({Mult.left=current} '*' | {Div.left=current} '/') right=Primary)*
;

Primary returns Expression:
	Reference | Number | Text | ExternalUse | Percentage | FloatNumber | Boolean
;

Number:
	value=INT
;

Text:
	value=STRING
;

ExternalUse:
	ref=[External] '(' args+=Expression? (',' args+=Expression)* ')'
;

Percentage:
	value=INT '%'
;

FloatNumber:
	value=FLOAT
;

FLOAT returns ecore::EFloat:
	INT '.' INT
;

Boolean:
	value=('true' | 'false')
;

Expose:
	'expose' name=ID ':' BEGIN statements+=Statement+ END
;

terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';